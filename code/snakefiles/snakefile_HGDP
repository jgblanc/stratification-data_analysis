# Snakefile to run HGDP (full data) / UKBB  data analysis
CHR =[]
for i in range(1, 23):
  CHR.append(str(i))
ROOT = ["/gpfs/data/berg-lab/jgblanc/stratification-data_analysis"]


def get_params(x):
  out = x.split("_")[1]
  return out

def get_size_minus_one(x):
  if  x == "ALL":
    out = 928
  else:
    out = "ERROR"
  return out

rule all:
    input:
        expand("{root}", root=ROOT, chr=CHR)


## HGDP genotype data processing

rule HGDP_make_plink2_all:
    input:
        psam="/gpfs/data/berg-lab/data/HGDP/plink2-files-hg19/hgdp_wgs.20190516.full.chr{chr}.psam",
        pvar="/gpfs/data/berg-lab/data/HGDP/plink2-files-hg19/hgdp_wgs.20190516.full.chr{chr}.pvar",
        pgen="/gpfs/data/berg-lab/data/HGDP/plink2-files-hg19/hgdp_wgs.20190516.full.chr{chr}.pgen"
    output:
        psam="{root}/data/hgdp/plink2-files/ALL/hgdp_wgs.20190516.full.chr{chr}.psam",
        pvar="{root}/data/hgdp/plink2-files/ALL/hgdp_wgs.20190516.full.chr{chr}.pvar",
        pgen="{root}/data/hgdp/plink2-files/ALL/hgdp_wgs.20190516.full.chr{chr}.pgen"
    params:
        prefix_out="{root}/data/hgdp/plink2-files/ALL/hgdp_wgs.20190516.full.chr{chr}",
	      prefix_in="/gpfs/data/berg-lab/data/HGDP/plink2-files-hg19/hgdp_wgs.20190516.full.chr{chr}"
    shell:
        """
        plink2 --pfile {params.prefix_in} \
        --maf 0.01 \
        --rm-dup exclude-all \
        --snps-only \
        --max-alleles 2 \
        --make-pgen \
        --set-all-var-ids @:# \
        --threads 8 \
        --memory 38000 \
        --out {params.prefix_out}
        """

## Recode HGDP with UKBB ref/alt alleles and save to new directory

rule HGDP_recode:
    input:
        psam="{root}/data/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}.psam",
        pvar="{root}/data/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}.pvar",
        pgen="{root}/data/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}.pgen",
      	snp_list="{root}/data/ukbb-hgdp/variants/{dataset}/snps_chr{chr}.txt"
    output:
        psam="{root}/data/ukbb-hgdp/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}.psam",
        pvar="{root}/data/ukbb-hgdp/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}.pvar",
        pgen="{root}/data/ukbb-hgdp/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}.pgen"
    params:
        prefix_in="{root}/data/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}",
        prefix_out="{root}/data/ukbb-hgdp/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}"
    shell:
        """
        plink2 --pfile {params.prefix_in} \
        --extract {input.snp_list} \
	--ref-allele {input.snp_list} \
	--make-pgen \
        --out {params.prefix_out}
        """

## Make latitude and longitude test vector

rule make_Tvec_cordinates:
    input:
        psam="/gpfs/data/berg-lab/data/HGDP/plink2-files-hg19/hgdp_wgs.20190516.full.chr22.psam",
        populations="{root}/data/hgdp/hgdp_wgs.20190516.metadata.txt"
    output:
        "{root}/data/ukbb-hgdp/calculate_Tm/ALL/Tvec_cordinates.txt",
        "{root}/data/ukbb-hgdp/calculate_Tm/EUR/Tvec_cordinates.txt"
    shell:
        """
        Rscript code/calculate_Tm/make_Tvec_hgdp_cordinates.R {input.psam} {input.populations} {wildcards.root}/data/ukbb-hgdp/calculate_Tm/ALL/Tvec {wildcards.root}/data/ukbb-hgdp/calculate_Tm/EUR/Tvec
        """





# Snakefile to run full data analysis with any set of constrasts
tpSize = "50000"
gpSize = "300000"
CHR =[]
for i in range(1, 23):
  CHR.append(str(i))
SUBDATASET = []
for i in range(10, 11):
  SUBDATASET.append("tp" + str(i) + "_" + tpSize)
GWAS = ["gp" + str(gpSize)]
CONTRASTS = ["sharp", "smooth"]
PC = [0, 10,40]
COVAR = ["no-FGr", "FGr-LOCO"]
PHENOTYPE=["env_0.5","env_2.0"]
PVALUE_THRESHOLD = "1e-5"

#wildcard_constraints:
#    subdataset="tp*",
#    gwas="gp*"

def get_chr_num(x):
  out = int(x)
  return out

def get_params(x):
  out = x.split("_")[1]
  return out

rule all:
    input:
        expand("output/run_gwas/Sims/{subdataset}/{gwas}/covariates/FGr-LOCO_{contrasts}_{chr}-PC{pc}.txt", chr=CHR, subdataset=SUBDATASET, gwas=GWAS, phenotype=PHENOTYPE, covar=COVAR, contrasts=CONTRASTS, pc=PC)


## Get final set of SNP (White MAF > 1%)

rule get_overlapping_snps:
    input:
        "data/ukbb/variants/White/ukb_imp_chr{chr}_v3.afreq"
    output:
        "data/Sims/variants/overlappingSNPs_chr{chr}.txt"
    shell:
        """
        cut -f2,3 {input} > {output}
        """

## Get lists of IDs
rule get_ID_lists:
    input:
        sex="data/phenotypes/genetic_sex_22001.txt",
        batch="data/phenotypes/genotype_measurement_batch_22000.txt",
        north="data/phenotypes/PlaceOfBirthNorthCord_129.txt",
        east="data/phenotypes/PlaceOfBirthEastCord_130.txt",
        age="data/phenotypes/age_at_recruitment_21022.txt",
        genotyped="/scratch/jgblanc/ukbb/plink2-files/White/ukb_imp_chr22_v3.psam",
        wbs="data/ukbb/WBS.ids"
    output:
        gwas="data/Sims/ids/{subdataset}/{gwas}/gwas.ids",
        test="data/Sims/ids/{subdataset}/{gwas}/test.ids"
    params:
        gs=int(gpSize),
        ts=int(tpSize)
    shell:
        """
        Rscript code/Sims/get_IDs.R {input.sex} {input.batch} {input.north} {input.east} {input.age} {input.genotyped} {output.gwas} {output.test} {params.gs} {params.ts} {input.wbs}
        """


## Simulate Phenotype in GWAS panel

rule simulate_phenotypes_smooth:
    input:
        north = "data/phenotypes/PlaceOfBirthNorthCord_129.txt",
        gwas_ids = "data/Sims/ids/{subdataset}/{gwas}/gwas.ids"
    output:
        "output/simulate_phenotypes/Sims/{subdataset}/{gwas}/{phenotype}-smooth.txt"
    params:
        shift = lambda wildcards: get_params(wildcards.phenotype)
    shell:
        """
        Rscript code/simulate_phenotypes/simulate_smooth.R {input.north} {input.gwas_ids} {output} {params.shift}
        """

rule simulate_phenotypes_sharp:
    input:
        north = "data/phenotypes/PlaceOfBirthNorthCord_129.txt",
        east = "data/phenotypes/PlaceOfBirthEastCord_130.txt",
        gwas_ids = "data/Sims/ids/{subdataset}/{gwas}/gwas.ids"
    output:
        "output/simulate_phenotypes/Sims/{subdataset}/{gwas}/{phenotype}-sharp.txt"
    params:
        shift = lambda wildcards: get_params(wildcards.phenotype)
    shell:
        """
        Rscript code/simulate_phenotypes/simulate_sharp.R {input.north} {input.east} {input.gwas_ids} {output} {params.shift}
        """

## Get test vector contrasts

rule get_TestVector_smooth:
    input:
        North="data/phenotypes/PlaceOfBirthNorthCord_129.txt",
        ids="data/Sims/ids/{subdataset}/{gwas}/test.ids"
    output:
        north = "data/Sims/TestVecs/{subdataset}/{gwas}/smooth.txt"
    shell:
        """
        Rscript code/Sims/get_Tvec_North.R {input.North}  {input.ids} {output.north}
        """

rule get_TestVector_sharp:
    input:
        North="data/phenotypes/PlaceOfBirthNorthCord_129.txt",
        East="data/phenotypes/PlaceOfBirthEastCord_130.txt",
        ids="data/Sims/ids/{subdataset}/{gwas}/test.ids"
    output:
        sharp = "data/Sims/TestVecs/{subdataset}/{gwas}/sharp.txt"
    shell:
        """
        Rscript code/Sims/get_Tvec_Sharp.R {input.North} {input.East} {input.ids} {output.sharp}
        """

rule compute_r_North:
    input:
        TvecNorth="data/Sims/TestVecs/{subdataset}/{gwas}/smooth.txt",
        IDs="data/Sims/ids/{subdataset}/{gwas}/test.ids",
        snps="data/Sims/variants/overlappingSNPs_chr{chr}.txt"
    output:
        North="data/Sims/r/{subdataset}/{gwas}/smooth_chr{chr}.rvec"
    resources:
        mem_mb=50000,
	time="03:00:00"
    threads: 16
    params:
        prefix_tp = "/scratch/jgblanc/ukbb/plink2-files/White/ukb_imp_chr{chr}_v3",
        prefix_out = "data/Sims/r/{subdataset}/{gwas}/{chr}-smooth"
    shell:
        """
        Rscript code/Sims/compute_North_r.R {params.prefix_tp} {input.TvecNorth}  {params.prefix_out} {input.snps} {output.North} {input.IDs}
        rm {params.prefix_out}xt_temp.*
        """

rule compute_r_Sharp:
    input:
        TvecSharp="data/Sims/TestVecs/{subdataset}/{gwas}/sharp.txt",
        IDs="data/Sims/ids/{subdataset}/{gwas}/test.ids",
        snps="data/Sims/variants/overlappingSNPs_chr{chr}.txt"
    output:
        Sharp="data/Sims/r/{subdataset}/{gwas}/sharp_chr{chr}.rvec"
    resources:
        mem_mb=50000,
	time="03:00:00"
    threads: 16
    params:
        prefix_tp = "/scratch/jgblanc/ukbb/plink2-files/White/ukb_imp_chr{chr}_v3",
        prefix_out = "data/Sims/r/{subdataset}/{gwas}/{chr}-sharp"
    shell:
        """
        Rscript code/Sims/compute_Sharp_r.R {params.prefix_tp} {input.TvecSharp}  {params.prefix_out} {input.snps} {output.Sharp} {input.IDs}
        rm {params.prefix_out}xt_temp.*
        """

## Compute FGr

rule compute_FGr_chr:
    input:
        r="data/Sims/r/{subdataset}/{gwas}/{contrasts}_chr{chr}.rvec",
        gp_genos="/scratch/jgblanc/ukbb/plink2-files/White/ukb_imp_chr{chr}_v3.pgen",
        overlap_snps="data/Sims/variants/overlappingSNPs_chr{chr}.txt",
        IDs="data/Sims/ids/{subdataset}/{gwas}/gwas.ids"
    output:
        "output/calculate_FGr/Sims/{subdataset}/{gwas}/FGr_{contrasts}_{chr}.txt"
    resources:
        mem_mb=100000,
	time="03:00:00"
    threads: 16
    params:
        gp_prefix = "/scratch/jgblanc/ukbb/plink2-files/White/ukb_imp_chr{chr}_v3",
        out_prefix = "output/calculate_FGr/Sims/{subdataset}/{gwas}/{contrasts}_{chr}"
    shell:
        """
        Rscript code/calculate_FGr/calc_FGr_chr.R {params.gp_prefix} {params.out_prefix} {input.r} {input.overlap_snps} {output} {input.IDs}
        """

# Add together individal chromosomes LOCO

rule concat_chr_FGr:
    input:
        expand("output/calculate_FGr/Sims/{{subdataset}}/{{gwas}}/FGr_{{contrasts}}_{chr}.txt", chr = CHR)
    output:
        "output/calculate_FGr/Sims/{subdataset}/{gwas}/FGr-LOCO_{contrasts}_{chr}.txt"
    params:
        chrNum = lambda wildcards: get_chr_num(wildcards.chr),
        prefix_in = "output/calculate_FGr/Sims/{subdataset}/{gwas}/FGr_{contrasts}"
    shell:
        """
        Rscript code/calculate_FGr/concat_FGr_LOCO.R {params.prefix_in} {params.chrNum} {output}
        """

## GWAS panel PCA

rule make_tmp_plink2:
    input:
        gp="/scratch/jgblanc/ukbb/plink2-files/White/ukb_imp_chr{chr}_v3.pgen",
        overlap_snps="data/ukbb/ukbb_pc_snps.txt",
        IDs="data/Sims/ids/{subdataset}/{gwas}/gwas.ids"
    output:
        "/scratch/jgblanc/ukbb/plink2-files/White/{subdataset}/{gwas}/tmp_{chr}.pgen",
        "/scratch/jgblanc/ukbb/plink2-files/White/{subdataset}/{gwas}/tmp_{chr}.pvar",
        "/scratch/jgblanc/ukbb/plink2-files/White/{subdataset}/{gwas}/tmp_{chr}.psam"
    params:
        prefix_out = "/scratch/jgblanc/ukbb/plink2-files/White/{subdataset}/{gwas}/tmp_{chr}",
        prefix_plink = "/scratch/jgblanc/ukbb/plink2-files/White/ukb_imp_chr{chr}_v3"
    threads: 16
    resources:
        mem_mb=38000,
        time="00:30:00"
    shell:
        """
        plink2 --pfile {params.prefix_plink} \
        --keep {input.IDs} \
        --extract {input.overlap_snps} \
	--make-pgen \
        --out {params.prefix_out}
        """


rule merge_GWAS_PCA:
    input:
        gp_genos=expand("/scratch/jgblanc/ukbb/plink2-files/White/{{subdataset}}/{{gwas}}/tmp_{chr}.pgen", chr=CHR)
    output:
        vec="data/Sims/pca/{subdataset}/{gwas}/pca.eigenvec",
        val="data/Sims/pca/{subdataset}/{gwas}/pca.eigenval"
    params:
        prefix_out = "data/Sims/pca/{subdataset}/{gwas}/pca",
        merge_prefix = expand("/scratch/jgblanc/ukbb/plink2-files/White/{{subdataset}}/{{gwas}}/tmp_{chr}", chr=CHR, newline="\n"),
	remove_path = "/scratch/jgblanc/ukbb/plink2-files/White/{subdataset}/{gwas}/"
    threads: 16
    resources:
        mem_mb=50000,
        time="03:00:00"
    shell:
        """
	echo {params.merge_prefix} > {wildcards.subdataset}-tmp.txt
        tr ' ' '\n' < "{wildcards.subdataset}-tmp.txt" > "{wildcards.subdataset}-tmp_chrm_list.txt"
        plink2 --pmerge-list {wildcards.subdataset}-tmp_chrm_list.txt \
        --pca 40 approx \
	--memory 50000 \
	--threads 16 \
        --out {params.prefix_out}
        rm {wildcards.subdataset}-tmp*
	rm {params.remove_path}*
	rm {params.prefix_out}.p*
        """


## Run GWAS

rule assemble_fixed_covars:
    input:
        sex="data/phenotypes/genetic_sex_22001.txt",
        batch="data/phenotypes/genotype_measurement_batch_22000.txt"
    output:
        "output/run_gwas/fixed_covars.txt"
    shell:
        """
        Rscript code/run_gwas/assemble_fixed_covar.R {input.sex} {input.batch} {output}
        """

rule assemble_quant_covars_FGr:
    input:
        age="data/phenotypes/age_at_recruitment_21022.txt",
        covar="output/calculate_FGr/Sims/{subdataset}/{gwas}/FGr-LOCO_{contrasts}_{chr}.txt",
        pcs="data/Sims/pca/{subdataset}/{gwas}/pca.eigenvec"
    output:
        "output/run_gwas/Sims/{subdataset}/{gwas}/covariates/FGr-LOCO_{contrasts}_{chr}-PC{pc}.txt"
    params:
        pcNum = lambda wildcards: get_chr_num(wildcards.pc)
    shell:
        """
        Rscript code/run_gwas/assemble_quant_covar.R {input.age} {input.covar} {input.pcs} {params.pcNum} {output}
        """

rule assemble_quant_covars:
    input:
        age="data/phenotypes/age_at_recruitment_21022.txt",
        pcs="data/Sims/pca/{subdataset}/{gwas}/pca.eigenvec"
    output:
        "output/run_gwas/Sims/{subdataset}/{gwas}/covariates/no-FGr_{contrasts}_{chr}-PC{pc}.txt"
    params:
        pcNum = lambda wildcards: get_chr_num(wildcards.pc)
    shell:
        """
        Rscript code/run_gwas/assemble_quant_covar_control.R {input.age} {input.pcs} {params.pcNum} {output}
        """

rule run_fastGWA:
    input:
        pheno="output/simulate_phenotypes/Sims/{subdataset}/{gwas}/{phenotype}-{contrasts}.txt",
        qcovar="output/run_gwas/Sims/{subdataset}/{gwas}/covariates/{covar}_{contrasts}_{chr}-PC{pc}.txt",
        gp_genos="/scratch/jgblanc/ukbb/plink2-files/White/ukb_imp_chr{chr}_v3.pgen",
        overlap_snps="data/Sims/variants/overlappingSNPs_chr{chr}.txt",
        covar="output/run_gwas/fixed_covars.txt",
        IDs="data/Sims/ids/{subdataset}/{gwas}/gwas.ids"
    output:
        "/scratch/jgblanc/stratification-data_analysis/output/run_gwas/Sims/{subdataset}/{gwas}/{phenotype}/raw_LR/{covar}_{contrasts}_{chr}-PC{pc}.fastGWA",
    params:
        prefix_out = "/scratch/jgblanc/stratification-data_analysis/output/run_gwas/Sims/{subdataset}/{gwas}/{phenotype}/raw_LR/{covar}_{contrasts}_{chr}-PC{pc}",
        prefix_plink = "/scratch/jgblanc/ukbb/plink2-files/White/ukb_imp_chr{chr}_v3"
    threads: 16
    resources:
        mem_mb=100,
        time="00:30:00"
    shell:
        """
        gcta  --pheno {input.pheno} \
        --keep {input.IDs} \
	--qcovar {input.qcovar} \
	--covar {input.covar} \
	--extract {input.overlap_snps} \
	--fastGWA-lr \
	--threads {threads} \
	--pfile {params.prefix_plink} \
	--out {params.prefix_out}
        """

## Pick minimum p-value per block

rule assign_snps_to_blocks:
    input:
        ldBlocks="data/LD_blocks/fourier_ls-all_parsed.bed",
        ss="/scratch/jgblanc/stratification-data_analysis/output/run_gwas/Sims/{subdataset}/{gwas}/{phenotype}/raw_LR/{covar}_{contrasts}_{chr}-PC{pc}.fastGWA",
        r="data/Sims/r/{subdataset}/{gwas}/{contrasts}_chr{chr}.rvec",
    output:
        betas="/scratch/jgblanc/stratification-data_analysis/output/pga_test/Sims/{subdataset}/{gwas}/{phenotype}/formated_ss_LR/{covar}_{contrasts}_{chr}-PC{pc}.betas"
    params:
        pt = PVALUE_THRESHOLD
    shell:
        """
        Rscript code/pga_test/assign_snps_to_blocks_LR.R {input.ldBlocks} {input.ss} {input.r} {output.betas} {params.pt}
        rm {input.ss}
        """

## Run selection test

rule concat_snps:
    input:
        expand("/scratch/jgblanc/stratification-data_analysis/output/pga_test/Sims/{{subdataset}}/{{gwas}}/{{phenotype}}/formated_ss_LR/{{covar}}_{{contrasts}}_{chr}-PC{{pc}}.betas", chr=CHR)
    output:
        "output/pga_test/Sims/{subdataset}/{gwas}/{phenotype}/formated_ss_LR/{covar}_{contrasts}.all-PC{pc}.betas"
    shell:
        """
        cat {input} > {output}
        rm {input}
        """

rule pga_test:
    input:
        "output/pga_test/Sims/{subdataset}/{gwas}/{phenotype}/formated_ss_LR/{covar}_{contrasts}.all-PC{pc}.betas"
    output:
        results="output/pga_test/Sims/{subdataset}/{gwas}/{phenotype}/results_LR/{covar}_{contrasts}.all-PC{pc}.results",
	gzip="output/pga_test/Sims/{subdataset}/{gwas}/{phenotype}/formated_ss_LR/{covar}_{contrasts}.all-PC{pc}.betas.gz"
    shell:
        """
        Rscript code/pga_test/run_test_jacknife_LR.R {input} {output.results}
	gzip {input}
        """

## Compile Results

rule concat_pga_test:
    input:
        expand("output/pga_test/Sims/{subdataset}/{gwas}/{phenotype}/results_LR/{covar}_{contrasts}.all-PC{pc}.results", covar = COVAR, contrasts = CONTRASTS, pc = PC, phenotype = PHENOTYPE, gwas=GWAS, subdataset=SUBDATASET)
    output:
        "plots/Sims/results.txt"
    shell:
        """
        Rscript code/pga_test/concat_results_Sims.R {output} {input}
        """

## Compute error in FGr

rule compute_FGr_error:
    input:
        Fgr=expand("output/calculate_FGr/Sims/{{subdataset}}/{{gwas}}/FGr_{{contrasts}}_{chr}.txt", chr = CHR)
    output:
        "output/calculate_FGr/Sims/{subdataset}/{gwas}/Var_{contrasts}.txt"
    params:
        prefix_in = "output/calculate_FGr/Sims/{subdataset}/{gwas}/FGr_{contrasts}"
    shell:
        """
        Rscript code/calculate_FGr/compute_error_jacknife.R {params.prefix_in} {output}
        """

rule concat_FGr_error:
    input:
        expand("output/calculate_FGr/Sims/{subdataset}/{gwas}/Var_{contrasts}.txt", subdataset = SUBDATASET, gwas = GWAS, contrasts=CONTRASTS)
    output:
        "plots/Sims/FGrError.txt"
    shell:
        """
        Rscript code/calculate_FGr/concat_error.R {output} {input}
        """

## Compute FGr vs PCs

rule compute_PC_FGr:
    input:
        Fgr=expand("output/calculate_FGr/Sims/{{subdataset}}/{{gwas}}/FGr_{{contrasts}}_{chr}.txt", chr = CHR),
        PCs = "data/Sims/{gwas}/pca.eigenvec"
    output:
        "plots/Sims/{subdataset}/{gwas}/{contrasts}_PCs_FGr.txt"
    params:
        prefix_in = "output/calculate_FGr/Sims/{subdataset}/{gwas}/FGr_{contrasts}"
    shell:
        """
        Rscript code/calculate_FGr/compute_PC_FGR_model.R {params.prefix_in} {input.PCs} {output}
        """


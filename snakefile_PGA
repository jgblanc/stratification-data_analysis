# Snakefile to run full data analysis with any set of constrasts
CHR =[]
for i in range(1, 23):
  CHR.append(str(i))
DATASET = ["pga_paper"]
NSNP = ["L-1000" ,"L-3162", "L-10000","L-31623",  "L-100000","L-316228", "L-1000000"]
#NSNP = ["L-1000000"]
REP = ["B1"]
CONTRASTS = ["Lat", "Long"]
PC = [0,40]
COVAR = ["no-FGr", "FGr-LOCO"]
PHENOTYPE=[ "StandingHeight_50"]
#PHENOTYPE = [f.split(".")[0] for f in os.listdir("data/phenotypes/normalized/") if f.endswith('.txt')]
PVALUE_THRESHOLD = "1e-5"
#print(CONTRASTS)


wildcard_constraints:
    subdataset="t[0-9]*",
    gwas="g[0-9]*"


def get_chr_num(x):
  out = int(x)
  return out

print("HI")

rule all:
    input:
        expand("output/calculate_FGr/pga_paper/{rep}/{nsnp}/Var_{contrasts}.txt", rep=REP, chr=CHR, nsnp=NSNP, contrasts=CONTRASTS)


# Sample individuals for panels

rule get_ID_lists:
    input:
        sex="data/phenotypes/genetic_sex_22001.txt",
        batch="data/phenotypes/genotype_measurement_batch_22000.txt",
        age="data/phenotypes/age_at_recruitment_21022.txt",
        genotyped="/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_imp_chr22_v3.psam",
        phenotyped = "data/phenotypes/StandingHeight_50.txt",
        withdraw = "data/ukbb/withdraw69046_241_20240328.txt"
    output:
        gwas="data/pga_paper/{rep}/ids/gwas.ids"
    shell:
        """
        Rscript code/PGA_paper/IDs_ALL.R  {input.sex} {input.batch} {input.age} {input.genotyped} {input.phenotyped} {input.withdraw} {output.gwas}
        """

# Get overlapping SNPs

rule get_overlapping_snps:
    input:
        "data/hgdp/hgdp-all/ALL/variants/overlappingSNPs_chr{chr}.txt"
    output:
        "data/pga_paper/variants/{rep}/overlappingSNPs_chr{chr}.txt"
    shell:
        """
        cp {input} {output}
        """

# Compute genotype contrasts

rule compute_r:
    input:
        Lat="data/hgdp/hgdp-all/r/Lat_chr{chr}.rvec",
        Long="data/hgdp/hgdp-all/r/Long_chr{chr}.rvec"
    output:
        Lat = "data/pga_paper/{rep}/r/Lat_chr{chr}.rvec",
        Long = "data/pga_paper/{rep}/r/Long_chr{chr}.rvec"
    shell:
        """
        cp {input.Lat} {output.Lat}
        cp {input.Long} {output.Long}
        """

# Downsample SNPs for correction

rule prune_SNPs:
    input:
        gp_genos="/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_imp_chr{chr}_v3.pgen",
        IDs="data/pga_paper/{rep}/ids/gwas.ids",
        snps="data/pga_paper/variants/{rep}/overlappingSNPs_chr{chr}.txt"
    output:
        "data/pga_paper/{rep}/pruned_snps/{chr}.prune.in"
    resources:
        time="06:00:00",
	mem_mb=38000
    params:
        prefix_plink = "/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_imp_chr{chr}_v3",
        prefix_out = "data/pga_paper/{rep}/pruned_snps/{chr}"
    shell:
        """
        plink2 --pfile {params.prefix_plink} \
        --keep {input.IDs} \
        --extract {input.snps} \
        --indep-pairwise 100kb 0.8 \
        --out {params.prefix_out}
        """

rule downsample_snps:
    input:
        expand("data/pga_paper/{{rep}}/pruned_snps/{chr}.prune.in", chr = CHR, newline="\n")
    output:
        all = "data/pga_paper/{rep}/pruned_snps/{nsnp}/all.in",
        sample = "data/pga_paper/{rep}/{nsnp}/all_snps.txt"
    shell:
        """
        Rscript code/PGA_paper/sample_snps.R {output.all} {output.sample} {wildcards.nsnp} {input}
        """

# Compute FGr

rule compute_FGr_chr:
  input:
      r="data/pga_paper/{rep}/r/{contrasts}_chr{chr}.rvec",
      gp_genos="/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_imp_chr{chr}_v3.pgen",
      overlap_snps="data/pga_paper/{rep}/{nsnp}/all_snps.txt",
      IDs="data/pga_paper/{rep}/ids/gwas.ids"
  output:
      "output/calculate_FGr/pga_paper/{rep}/{nsnp}/FGr_{contrasts}_{chr}.txt"
  resources:
      mem_mb=100000,
      time="03:00:00"
  threads: 16
  params:
      gp_prefix = "/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_imp_chr{chr}_v3",
      out_prefix = "output/calculate_FGr/pga_paper/{rep}/{nsnp}/{contrasts}_{chr}"
  shell:
      """
      Rscript code/calculate_FGr/calc_FGr_chr.R {params.gp_prefix} {params.out_prefix} {input.r} {input.overlap_snps} {output} {input.IDs}
      """

rule concat_chr_FGr:
    input:
        expand("output/calculate_FGr/pga_paper/{{rep}}/{{nsnp}}/FGr_{{contrasts}}_{chr}.txt", chr = CHR)
    output:
        "output/calculate_FGr/pga_paper/{rep}/{nsnp}/FGr-LOCO_{contrasts}_{chr}.txt"
    params:
        chrNum = lambda wildcards: get_chr_num(wildcards.chr),
        prefix_in = "output/calculate_FGr/pga_paper/{rep}/{nsnp}/FGr_{contrasts}"
    shell:
        """
        Rscript code/calculate_FGr/concat_FGr_LOCO.R {params.prefix_in} {params.chrNum} {output}
        """

# Estimate FGr Error

rule compute_FGr_error:
    input:
        expand("output/calculate_FGr/pga_paper/{{rep}}/{{nsnp}}/FGr_{{contrasts}}_{chr}.txt", chr = CHR)
    output:
      "output/calculate_FGr/pga_paper/{rep}/{nsnp}/Var_{contrasts}.txt"
    params:
      prefix_in = "output/calculate_FGr/pga_paper/{rep}/{nsnp}/FGr_{contrasts}"
    shell:
      """
      Rscript code/calculate_FGr/compute_error_jacknife.R {params.prefix_in} {output}
      """

# Snakefile to run HGDP (full data) / UKBB  data analysis
DATASET=["hgdp-all"]
GWAS=["ALL", "WBS"]
SUBPOPS=["CENTRALSOUTHASIA", "AFRICA", "OCEANIA", "EUROPE", "MIDDLEEAST", "AMERICA", "EASTASIA"]
#SUBPOPS=["French", "Sardinian", "Orcadian", "Russian", "BergamoItalian", "Tuscan" , "Basque", "Adygei"]
SPNUM = len(SUBPOPS)
CHR =[]
for i in range(1, 23):
  CHR.append(str(i))
#TMP = [f.split(".")[0] for f in os.listdir("data/hgdp/r/EUR/") if f.endswith('_chr9.rvec')]
#CONTRASTS = [s.rstrip("_chr9") for s in TMP]
#CONTRASTS = ["French-Sardinian"]
#PC = [40]
#COVAR=["FGr-LOCO", "control"]

def get_params(x):
  out = x.split("_")[1]
  return out

rule all:
    input:
        expand("data/hgdp/{dataset}/r/r_list_{chr}.txt"" , chr=CHR, gwas=GWAS, dataset=DATASET, subpops=SUBPOPS)


## HGDP genotype data processing

rule HGDP_make_plink2:
    input:
        psam="/gpfs/data/berg-lab/data/HGDP/plink2-files-hg19/hgdp_wgs.20190516.full.chr{chr}.psam",
        pvar="/gpfs/data/berg-lab/data/HGDP/plink2-files-hg19/hgdp_wgs.20190516.full.chr{chr}.pvar",
        pgen="/gpfs/data/berg-lab/data/HGDP/plink2-files-hg19/hgdp_wgs.20190516.full.chr{chr}.pgen",
    output:
        psam="data/hgdp/plink2-files-raw/hgdp_wgs.20190516.full.chr{chr}.psam",
        pvar="data/hgdp/plink2-files-raw/hgdp_wgs.20190516.full.chr{chr}.pvar",
        pgen="data/hgdp/plink2-files-raw/hgdp_wgs.20190516.full.chr{chr}.pgen"
    params:
        prefix_out="data/hgdp/plink2-files-raw/hgdp_wgs.20190516.full.chr{chr}",
	      prefix_in="/gpfs/data/berg-lab/data/HGDP/plink2-files-hg19/hgdp_wgs.20190516.full.chr{chr}"
    shell:
        """
        plink2 --pfile {params.prefix_in} \
        --maf 0.01 \
        --rm-dup exclude-all \
        --snps-only \
        --max-alleles 2 \
        --make-pgen \
        --set-all-var-ids @:# \
        --threads 8 \
        --memory 38000 \
        --out {params.prefix_out}
        """

# Get allele frequency in HGDP

rule HGDP_freq:
    input:
        psam="data/hgdp/plink2-files-raw/hgdp_wgs.20190516.full.chr{chr}.psam",
        pvar="data/hgdp/plink2-files-raw/hgdp_wgs.20190516.full.chr{chr}.pvar",
        pgen="data/hgdp/plink2-files-raw/hgdp_wgs.20190516.full.chr{chr}.pgen"
    output:
        freq="data/hgdp/variants-raw/hgdp_wgs.20190516.full.chr{chr}.afreq"
    params:
        prefix_in="data/hgdp/plink2-files-raw/hgdp_wgs.20190516.full.chr{chr}",
        prefix_out="data/hgdp/variants-raw/hgdp_wgs.20190516.full.chr{chr}"
    shell:
        """
        plink2 --pfile {params.prefix_in} \
        --freq \
	      --threads 8 \
        --memory 38000 \
        --out {params.prefix_out}
        """

# Get list of SNPs to recode

rule recode_list:
    input:
        freq_hgdp="data/hgdp/variants-raw/hgdp_wgs.20190516.full.chr{chr}.afreq",
        freq_ukbb="data/ukbb/ALL/variants/ukb_imp_chr{chr}_v3.afreq"
    output:
        "data/hgdp/variants-fliped/flipped_snps_{chr}.txt"
    shell:
        """
        Rscript code/hgdp/flip_snps.R {input.freq_ukbb} {input.freq_hgdp} {output}
        """

# Recode HGDP with UKBB ref/alt alleles and save to new directory

rule HGDP_recode:
    input:
        psam="data/hgdp/plink2-files-raw/hgdp_wgs.20190516.full.chr{chr}.psam",
        pvar="data/hgdp/plink2-files-raw/hgdp_wgs.20190516.full.chr{chr}.pvar",
        pgen="data/hgdp/plink2-files-raw/hgdp_wgs.20190516.full.chr{chr}.pgen",
      	snp_list="data/hgdp/variants-fliped/flipped_snps_{chr}.txt"
    output:
        psam="data/hgdp/plink2-files/hgdp_wgs.20190516.full.chr{chr}.psam",
        pvar="data/hgdp/plink2-files/hgdp_wgs.20190516.full.chr{chr}.pvar",
        pgen="data/hgdp/plink2-files/hgdp_wgs.20190516.full.chr{chr}.pgen"
    params:
        prefix_in="data/hgdp/plink2-files-raw/hgdp_wgs.20190516.full.chr{chr}",
        prefix_out="data/hgdp/plink2-files/hgdp_wgs.20190516.full.chr{chr}"
    shell:
        """
        plink2 --pfile {params.prefix_in} \
        --extract {input.snp_list} \
	      --ref-allele {input.snp_list} \
	      --make-pgen \
        --out {params.prefix_out}
        rm {params.prefix_in}.*
        """

rule HGDP_recoded_freq:
    input:
        psam="data/hgdp/plink2-files/hgdp_wgs.20190516.full.chr{chr}.psam",
        pvar="data/hgdp/plink2-files/hgdp_wgs.20190516.full.chr{chr}.pvar",
        pgen="data/hgdp/plink2-files/hgdp_wgs.20190516.full.chr{chr}.pgen"
    output:
	      freq="data/hgdp/plink2-files/hgdp_wgs.20190516.full.chr{chr}.afreq"
    params:
        prefix_in="data/hgdp/plink2-files/hgdp_wgs.20190516.full.chr{chr}",
        prefix_out="data/hgdp/plink2-files/hgdp_wgs.20190516.full.chr{chr}"
    shell:
        """
        plink2 --pfile {params.prefix_in} \
	      --freq \
        --out {params.prefix_out}
        """

## Get overlapping set of final SNPS for differenet datasets

rule get_overlapping_snps:
    input:
        freq_hgdp="data/hgdp/plink2-files/hgdp_wgs.20190516.full.chr{chr}.afreq",
	      freq_ukbb="data/ukbb/{gwas}/variants/ukb_imp_chr{chr}_v3.afreq"
    output:
        "data/hgdp/hgdp-all/{gwas}/variants/overlappingSNPs_chr{chr}.txt"
    shell:
        """
        Rscript code/hgdp/overlapping_snps.R {input.freq_ukbb} {input.freq_hgdp} {output}
        """

## Make Test Vectors

rule get_TestVector:
    input:
        metadata="data/hgdp/hgdp_wgs.20190516.metadata.txt",
        psam="data/hgdp/plink2-files/hgdp_wgs.20190516.full.chr1.psam"
    output:
        Lat="data/hgdp/{dataset}/TestVecs/Lat.txt",
        Long="data/hgdp/{dataset}/TestVecs/Long.txt"
    shell:
        """
        Rscript code/hgdp/get_LatLong_Tvec.R {input.metadata} {input.psam} {output.Lat} {output.Long}
        """

rule compute_r:
    input:
        TvecLat="data/hgdp/{dataset}/TestVecs/Lat.txt",
        TvecLong="data/hgdp/{dataset}/TestVecs/Long.txt",
        tp_genos="data/hgdp/plink2-files/hgdp_wgs.20190516.full.chr{chr}.psam",
        snps="data/hgdp/variants-fliped/flipped_snps_{chr}.txt"
    output:
        Lat="data/hgdp/{dataset}/r/Lat_chr{chr}.rvec",
        Long="data/hgdp/{dataset}/r/Long_chr{chr}.rvec"
    params:
        prefix_tp = "data/hgdp/plink2-files/hgdp_wgs.20190516.full.chr{chr}",
        prefix_out = "data/hgdp/{dataset}/r/{chr}"
    shell:
        """
        Rscript code/hgdp/compute_cord_r.R {params.prefix_tp} {input.TvecLat} {input.TvecLong} {params.prefix_out} {input.snps} {output.Lat} {output.Long}
        rm {params.prefix_out}xt_temp.*
        """

## Get continental pairwise comparisons

rule get_subpop_AF:
    input:
        psam="data/hgdp/plink2-files/hgdp_wgs.20190516.full.chr{chr}.psam",
        pvar="data/hgdp/plink2-files/hgdp_wgs.20190516.full.chr{chr}.pvar",
        pgen="data/hgdp/plink2-files/hgdp_wgs.20190516.full.chr{chr}.pgen",
        IDs="data/hgdp/popIDs/{subpops}.txt"
    output:
        "data/hgdp/{dataset}/popAF/{subpops}_chr{chr}.afreq"
    params:
        prefix_in="data/hgdp/plink2-files/hgdp_wgs.20190516.full.chr{chr}",
        prefix_out="data/hgdp/{dataset}/popAF/{subpops}_chr{chr}"
    shell:
        """
        plink2 --pfile {params.prefix_in} \
        --keep {input.IDs} \
        --freq \
        --out {params.prefix_out}
        """

rule get_all_r:
    input:
        expand("data/hgdp/{{dataset}}/popAF/{subpops}_chr{{chr}}.afreq", subpops=SUBPOPS)
    output:
        "data/hgdp/{dataset}/r/r_list_{chr}.txt"
    params:
        spnum = SPNUM,
        prefix_out = "data/hgdp/{dataset}/r/"
    shell:
        """
        Rscript code/hgdp/get_pairwise_AF_contrasts.R {params.spnum} {input} {params.prefix_out} {output}
        """


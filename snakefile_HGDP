# Snakefile to run HGDP (full data) / UKBB  data analysis
DATASET=["EUR"]
GWAS=["WBS"]
SUBPOPS=["French", "Sardinian", "Orcadian", "Russian", "BergamoItalian", "Tuscan", "Basque", "Adygei"]
SPNUM = len(SUBPOPS)
CHR =[]
for i in range(1, 23):
  CHR.append(str(i))
TMP = [f.split(".")[0] for f in os.listdir("data/hgdp/r/EUR/") if f.endswith('_chr9.rvec')]
#CONTRASTS = [s.rstrip("_chr9") for s in TMP]
CONTRASTS = ["French-Sardinian"]
PC = [10,40]

def get_params(x):
  out = x.split("_")[1]
  return out

rule all:
    input:
        expand("output/prs/hgdp/{dataset}/{gwas}/scores/{contrasts}-PC{pc}.all.sscore", chr=CHR, dataset = DATASET, subpops=SUBPOPS, gwas=GWAS, contrasts=CONTRASTS, pc=PC)



## HGDP genotype data processing

rule get_EUR_sample_list:
    input:
        "data/hgdp/hgdp_wgs.20190516.metadata.txt"
    output:
        "data/hgdp/hgdp_wgs.20190516.EUR_samples.txt"
    shell:
        """
        Rscript code/hgdp/get_EUR_samples.R {input} {output}
        """

rule HGDP_make_plink2_EUR:
    input:
        psam="/gpfs/data/berg-lab/data/HGDP/plink2-files-hg19/hgdp_wgs.20190516.full.chr{chr}.psam",
        pvar="/gpfs/data/berg-lab/data/HGDP/plink2-files-hg19/hgdp_wgs.20190516.full.chr{chr}.pvar",
        pgen="/gpfs/data/berg-lab/data/HGDP/plink2-files-hg19/hgdp_wgs.20190516.full.chr{chr}.pgen",
        samples="data/hgdp/hgdp_wgs.20190516.EUR_samples.txt"
    output:
        psam="data/hgdp/plink2-files-raw/EUR/hgdp_wgs.20190516.full.chr{chr}.psam",
        pvar="data/hgdp/plink2-files-raw/EUR/hgdp_wgs.20190516.full.chr{chr}.pvar",
        pgen="data/hgdp/plink2-files-raw/EUR/hgdp_wgs.20190516.full.chr{chr}.pgen"
    params:
        prefix_out="data/hgdp/plink2-files-raw/EUR/hgdp_wgs.20190516.full.chr{chr}",
	      prefix_in="/gpfs/data/berg-lab/data/HGDP/plink2-files-hg19/hgdp_wgs.20190516.full.chr{chr}"
    shell:
        """
        plink2 --pfile {params.prefix_in} \
        --maf 0.01 \
        --keep {input.samples} \
        --rm-dup exclude-all \
        --snps-only \
        --max-alleles 2 \
        --make-pgen \
        --set-all-var-ids @:# \
        --threads 8 \
        --memory 38000 \l
        --out {params.prefix_out}
        """

rule HGDP_freq:
    input:
        psam="data/hgdp/plink2-files-raw/{dataset}/hgdp_wgs.20190516.full.chr{chr}.psam",
        pvar="data/hgdp/plink2-files-raw/{dataset}/hgdp_wgs.20190516.full.chr{chr}.pvar",
        pgen="data/hgdp/plink2-files-raw/{dataset}/hgdp_wgs.20190516.full.chr{chr}.pgen"
    output:
        freq="data/hgdp/variants/{dataset}/hgdp_wgs.20190516.full.chr{chr}.afreq"
    params:
        prefix_in="data/hgdp/plink2-files-raw/{dataset}/hgdp_wgs.20190516.full.chr{chr}",
        prefix_out="data/hgdp/variants/{dataset}/hgdp_wgs.20190516.full.chr{chr}"
    shell:
        """
        plink2 --pfile {params.prefix_in} \
        --freq \
	      --threads 8 \
        --memory 38000 \
        --out {params.prefix_out}
        """

## Get overlapping set of final SNPS

# Right now set for 1%
rule get_overlapping_snps:
    input:
        freq_hgdp="data/hgdp/variants/{dataset}/hgdp_wgs.20190516.full.chr{chr}.afreq",
	      freq_ukbb="data/ukbb/variants/ALL/ukb_imp_chr{chr}_v3.afreq"
    output:
        "data/hgdp/variants/{dataset}/ALL/overlappingSNPs_chr{chr}.txt"
    shell:
        """
        Rscript code/genotypes/overlapping_snps.R {input.freq_ukbb} {input.freq_hgdp} {output}
        """

rule get_overlapping_snps_WBS:
    input:
        freq_hgdp="data/hgdp/variants/{dataset}/hgdp_wgs.20190516.full.chr{chr}.afreq",
	      freq_ukbb="data/ukbb/variants/WBS/ukb_imp_chr{chr}_v3.afreq"
    output:
        "data/hgdp/variants/{dataset}/WBS/overlappingSNPs_chr{chr}.txt"
    shell:
        """
        Rscript code/genotypes/overlapping_snps.R {input.freq_ukbb} {input.freq_hgdp} {output}
        """

## Recode HGDP with UKBB ref/alt alleles and save to new directory

rule HGDP_recode:
    input:
        psam="data/hgdp/plink2-files-raw/{dataset}/hgdp_wgs.20190516.full.chr{chr}.psam",
        pvar="data/hgdp/plink2-files-raw/{dataset}/hgdp_wgs.20190516.full.chr{chr}.pvar",
        pgen="data/hgdp/plink2-files-raw/{dataset}/hgdp_wgs.20190516.full.chr{chr}.pgen",
      	snp_list="data/hgdp/variants/{dataset}/ALL/overlappingSNPs_chr{chr}.txt"
    output:
        psam="data/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}.psam",
        pvar="data/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}.pvar",
        pgen="data/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}.pgen"
    params:
        prefix_in="data/hgdp/plink2-files-raw/{dataset}/hgdp_wgs.20190516.full.chr{chr}",
        prefix_out="data/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}"
    shell:
        """
        plink2 --pfile {params.prefix_in} \
        --extract {input.snp_list} \
	      --ref-allele {input.snp_list} \
	      --make-pgen \
        --out {params.prefix_out}
        """

## Get list of all population IDs

rule get_EUR_subpop_list:
    input:
        "data/hgdp/hgdp_wgs.20190516.metadata.txt"
    output:
        expand("data/hgdp/popIDs/{{dataset}}/{subpops}.txt", subpops=SUBPOPS)
    params:
        prefix_out="data/hgdp/popIDs/{dataset}/"
    shell:
        """
        Rscript code/hgdp/get_EUR_subpop_samples.R {input} {params.prefix_out}
        """

## Get population specifc allele frequencies

rule get_subpop_AF:
    input:
        psam="data/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}.psam",
        pvar="data/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}.pvar",
        pgen="data/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}.pgen",
        IDs="data/hgdp/popIDs/{dataset}/{subpops}.txt"
    output:
        "data/hgdp/popAF/{dataset}/{subpops}_chr{chr}.afreq"
    params:
        prefix_in="data/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}",
        prefix_out="data/hgdp/popAF/{dataset}/{subpops}_chr{chr}"
    shell:
        """
        plink2 --pfile {params.prefix_in} \
        --keep {input.IDs} \
        --freq \
        --out {params.prefix_out}
        """

## Get all AF contrasts

rule get_all_r:
    input:
        expand("data/hgdp/popAF/{{dataset}}/{subpops}_chr{{chr}}.afreq", subpops=SUBPOPS)
    output:
        "data/hgdp/r/{dataset}/r_list_{chr}.txt"
    params:
        spnum = SPNUM,
        prefix_out = "data/hgdp/r/{dataset}/"
    shell:
        """
        Rscript code/hgdp/get_pairwise_EUR_AF_contrasts.R {params.spnum} {input} {params.prefix_out} {output}
        """

## Build polygenic scores

#rule format_ss_pgs:
#    input:
#        expand("output/prs/hgdp/{{dataset}}/vilma/{{gwas}}/{{contrasts}}_{chr}-PC{{pc}}.estimates.tsv", chr=CHR)
#    output:
#        "output/prs/hgdp/{dataset}/{gwas}/vilma/{contrasts}-PC{pc}.all.tsv"
#    params:
#        all_chrs = CHR,
#        num_chr = len(CHR),
#        prefix_one = "output/prs/hgdp/{dataset}/vilma/{gwas}/{contrasts}",
#        prefix_two = "-PC{pc}.estimates.tsv"
#    shell:
#        """
#        Rscript code/prs/combine_chr.R {params.num_chr} {params.prefix_one} {params.prefix_two} {output} {params.all_chrs}
#        """

rule format_ss_pgs:
    input:
        "output/prs/hgdp/{dataset}/vilma/{gwas}/{contrasts}_{chr}-PC{pc}.estimates.tsv"
    output:
        "output/prs/hgdp/{dataset}/{gwas}/plink_format/{contrasts}_{chr}-PC{pc}.betas"
    shell:
        """
        Rscript code/prs/format_ss_for_plink.R {input} {output}
        """

rule build_pgs:
    input:
        betas="output/prs/hgdp/{dataset}/{gwas}/plink_format/{contrasts}_{chr}-PC{pc}.betas",
        psam="data/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}.psam",
        pvar="data/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}.pvar",
        pgen="data/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}.pgen"
    output:
        "output/prs/hgdp/{dataset}/{gwas}/scores/{contrasts}_{chr}-PC{pc}.sscore"
    params:
        prefix_out="output/prs/hgdp/{dataset}/{gwas}/scores/{contrasts}_{chr}-PC{pc}",
        prefix_in="data/hgdp/plink2-files/{dataset}/hgdp_wgs.20190516.full.chr{chr}"
    shell:
        """
        plink2 --pfile {params.prefix_in} \
        --score {input.betas} center cols=dosagesum,scoresums  \
        --out {params.prefix_out}
        """

rule combine_pgs:
    input:
        expand("output/prs/hgdp/{{dataset}}/{{gwas}}/scores/{{contrasts}}_{chr}-PC{{pc}}.sscore", chr=CHR)
    output:
        "output/prs/hgdp/{dataset}/{gwas}/scores/{contrasts}-PC{pc}.all.sscore"
    params:
        all_chrs = CHR,
        num_chr = len(CHR),
        prefix_one = "output/prs/hgdp/{dataset}/{gwas}/scores/{contrasts}",
        prefix_two = "-PC{pc}.sscore"
    shell:
        """
        Rscript code/prs/combine_chr.R {params.num_chr} {params.prefix_one} {params.prefix_two} {output} {params.all_chrs}
        """

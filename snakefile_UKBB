# Snakefile to prep UKBB for analysis
CHR =[]
for i in range(1, 23):
  CHR.append(str(i))
SUBSET=["ALL", "WBS"]
nPART=250
PARTS = []
for i in range(1, nPART+1):
  if i < 10:
    PARTS.append("0" + "0" + str(i))
  elif i < 100:
    PARTS.append("0" + str(i))
  else:
    PARTS.append(str(i))

rule all:
    input:
        expand("/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_imp_chr{chr}_v3.psam",chr=CHR),
        expand("/scratch/jgblanc/ukbb/plink2-files/WBS/ukb_imp_chr{chr}_v3.psam",chr=CHR)


## UKBB Genotype data processing

# Get frequency of all variants above 1% for

rule UKBB_begen_to_plink2:
    input:
        bgen="/gpfs/data/pierce-lab/uk-biobank-genotypes/ukb_imp_chr{chr}_v3.bgen",
        sample="/gpfs/data/berg-lab/data/ukbb/ukb22828_c22_b0_v3_s487192.sample"
    output:
        psam="/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_imp_chr{chr}_v3.psam",
	      pvar="/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_imp_chr{chr}_v3.pvar",
	      pgen="/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_imp_chr{chr}_v3.pgen"
    params:
        prefix="/scratch/jgblanc/ukbb/plink2-files/ALL/ukb_imp_chr{chr}_v3"
    resources:
        mem_mb=38000,
	walltime="00:06:00:00"
    shell:
        """
	      plink2 --bgen {input.bgen} ref-first \
	      --sample {input.sample} \
	      --mind 0.1 \
        --geno 0.1 \
        --maf 0.01 \
	      --rm-dup exclude-all \
	      --snps-only \
	      --max-alleles 2 \
	      --make-pgen \
	      --set-all-var-ids @:# \
	      --threads 20 \
	      --memory 38000 \
	      --out {params.prefix}
	      """

rule UKBB_begen_to_plink2_WBS:
    input:
        bgen="/gpfs/data/pierce-lab/uk-biobank-genotypes/ukb_imp_chr{chr}_v3.bgen",
        sample="/gpfs/data/berg-lab/data/ukbb/ukb22828_c22_b0_v3_s487192.sample",
        WBS="data/ukbb/WBS.ids"
    output:
        psam="/scratch/jgblanc/ukbb/plink2-files/WBS/ukb_imp_chr{chr}_v3.psam",
	      pvar="/scratch/jgblanc/ukbb/plink2-files/WBS/ukb_imp_chr{chr}_v3.pvar",
	      pgen="/scratch/jgblanc/ukbb/plink2-files/WBS/ukb_imp_chr{chr}_v3.pgen"
    params:
        prefix="/scratch/jgblanc/ukbb/plink2-files/WBS/ukb_imp_chr{chr}_v3"
    resources:
        mem_mb=38000,
	walltime="00:06:00:00"
    shell:
        """
	      plink2 --bgen {input.bgen} ref-first \
	      --sample {input.sample} \
	      --keep {input.WBS} \
	      --mind 0.1 \
        --geno 0.1 \
        --maf 0.01 \
	      --rm-dup exclude-all \
	      --snps-only \
	      --max-alleles 2 \
	      --make-pgen \
	      --set-all-var-ids @:# \
	      --threads 20 \
	      --memory 38000 \
	      --out {params.prefix}
	      """

rule UKBB_freq:
    input:
        psam="/scratch/jgblanc/ukbb/plink2-files/ukb_imp_chr{chr}_v3.psam",
        pvar="/scratch/jgblanc/ukbb/plink2-files/ukb_imp_chr{chr}_v3.pvar",
        pgen="/scratch/jgblanc/ukbb/plink2-files/ukb_imp_chr{chr}_v3.pgen"
    output:
        freq="{root}/data/ukbb/variants/ukb_imp_chr{chr}_v3.afreq"
    params:
        prefix_out="{root}/data/ukbb/variants/ukb_imp_chr{chr}_v3",
	      prefix_in="/scratch/jgblanc/ukbb/plink2-files/ukb_imp_chr{chr}_v3"
    shell:
        """
        plink2 --pfile {params.prefix_in} --freq \
        --threads 8 \
        --memory 38000 \
        --out {params.prefix_out}
        """

## Prep files for fastGWA

rule get_GRM_pruned_snps:
    input:
        psam="/scratch/jgblanc/ukbb/plink2-files/ukb_imp_chr{chr}_v3.psam",
	      pvar="/scratch/jgblanc/ukbb/plink2-files/ukb_imp_chr{chr}_v3.pvar",
	      pgen="/scratch/jgblanc/ukbb/plink2-files/ukb_imp_chr{chr}_v3.pgen"
    output:
        snplist="/scratch/jgblanc/ukbb/plink2-files-grm/ukb_imp_chr{chr}_v3.prune.in"
    params:
        prefix_out="/scratch/jgblanc/ukbb/plink2-files-grm/ukb_imp_chr{chr}_v3",
        prefix_in="/scratch/jgblanc/ukbb/plink2-files/ukb_imp_chr{chr}_v3"
    shell:
        """
	      plink2 --pfile {params.prefix_in} \
        --indep-pairwise 1000 100 0.9 \
	      --threads 20 \
	      --memory 38000 \
	      --out {params.prefix_out}
	      """

rule list_all_Chr:
    input:
        psam=expand("/scratch/jgblanc/ukbb/plink2-files/ukb_imp_chr{chr}_v3.psam", chr=CHR),
        pvar=expand("/scratch/jgblanc/ukbb/plink2-files/ukb_imp_chr{chr}_v3.pvar", chr=CHR),
        pgen=expand("/scratch/jgblanc/ukbb/plink2-files/ukb_imp_chr{chr}_v3.pgen", chr=CHR)
    output:
        "data/ukbb/chr_list.txt"
    params:
	      prefix_in="/scratch/jgblanc/ukbb/plink2-files/ukb_imp_chr"
    shell:
        """
        sh code/genotypes/list_chr.sh {params.prefix_in} {output}
        """

rule concat_prune_in:
    input:
        expand("/scratch/jgblanc/ukbb/plink2-files-grm/ukb_imp_chr{chr}_v3.prune.in", chr=CHR)
    output:
        "/scratch/jgblanc/ukbb/plink2-files-grm/all_snp.prune.in"
    shell:
        """
        cat {input} > {output}
        """

rule make_sparse_grm_parts:
    input:
        chrList = "data/ukbb/chr_list.txt",
        snpList = "/scratch/jgblanc/ukbb/plink2-files-grm/all_snp.prune.in"
    output:
        "/scratch/jgblanc/ukbb/grm/sp_grm.part_{npart}_{parts}.grm.bin"
    threads: 20
    resources:
        mem_mb=7000,
        walltime="00:03:00:00"
    params:
        prefix_out = "/scratch/jgblanc/ukbb/grm/sp_grm"
    shell:
        """
	      sh code/run_gwas/make_sparse_grm_parts.sh {input.chrList} {input.snpList} {wildcards.npart} {wildcards.parts} {params.prefix_out}
        """

rule concat_sparse_grm_parts:
    input:
        bin=expand("/scratch/jgblanc/ukbb/grm/sp_grm.part_{npart}_{parts}.grm.bin", npart=nPART, parts=PARTS),
        Nbin=expand("/scratch/jgblanc/ukbb/grm/sp_grm.part_{npart}_{parts}.grm.N.bin", npart=nPART, parts=PARTS),
        id=expand("/scratch/jgblanc/ukbb/grm/sp_grm.part_{npart}_{parts}.grm.id", npart=nPART, parts=PARTS)
    output:
        bin="/scratch/jgblanc/ukbb/grm/sp_grm.grm.bin",
        Nbin="/scratch/jgblanc/ukbb/grm/sp_grm.grm.N.bin",
        id="/scratch/jgblanc/ukbb/grm/sp_grm.grm.id"
    shell:
        """
	      cat {input.bin} > {output.bin}
	      cat {input.Nbin} > {output.Nbin}
	      cat {input.id} > {output.id}
	      #rm {input.bin}
	      #rm {input.Nbin}
	      #rm {input.id}
        """

rule compute_sparse_GRM:
    input:
        bin="/scratch/jgblanc/ukbb/grm/sp_grm.grm.bin",
        Nbin="/scratch/jgblanc/ukbb/grm/sp_grm.grm.N.bin",
        id="/scratch/jgblanc/ukbb/grm/sp_grm.grm.id"
    output:
        sp="/scratch/jgblanc/ukbb/grm/sparseGRM.grm.sp",
        id="/scratch/jgblanc/ukbb/grm/sparseGRM.grm.id"
    params:
        prefix_in = "/scratch/jgblanc/ukbb/grm/sp_grm",
        prefix_out = "/scratch/jgblanc/ukbb/grm/sparseGRM"
    shell:
        """
	      ./bin/gcta64 --grm {params.prefix_in} --make-bK-sparse 0.05 --out {params.prefix_out}
	      #rm {input.bin}
	      #rm {input.Nbin}
	      #rm {input.id}
        """

